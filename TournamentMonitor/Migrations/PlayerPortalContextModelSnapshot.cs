// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TournamentMonitor.Models;

namespace TournamentMonitor.Migrations
{
    [DbContext(typeof(PlayerPortalContext))]
    partial class PlayerPortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("TournamentMonitor.Models.Common.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<long?>("CountryId");

                    b.Property<long?>("LeagueId");

                    b.Property<string>("Line1");

                    b.Property<string>("Line2");

                    b.Property<string>("Name");

                    b.Property<long?>("PlayerKey");

                    b.Property<string>("Postcode");

                    b.Property<string>("Provence");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("PlayerKey");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TournamentMonitor.Models.Common.Region", b =>
                {
                    b.Property<long>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("TournamentMonitor.Models.CompetitorRecord", b =>
                {
                    b.Property<long>("CompetitorKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DoB");

                    b.Property<int>("Draws");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("Losses");

                    b.Property<float>("OpponentsOpponentsWin");

                    b.Property<float>("OpponentsWin");

                    b.Property<int>("PlayerID");

                    b.Property<long?>("PlayerKey");

                    b.Property<int>("Wins");

                    b.HasKey("CompetitorKey");

                    b.HasIndex("PlayerKey");

                    b.ToTable("CompetitorRecords");
                });

            modelBuilder.Entity("TournamentMonitor.Models.Country1", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode");

                    b.Property<string>("Name");

                    b.Property<long?>("RegionId");

                    b.HasKey("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries1");
                });

            modelBuilder.Entity("TournamentMonitor.Models.Event1", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Banner");

                    b.Property<string>("Country");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<long?>("EventTypeId");

                    b.Property<long?>("LeagueId");

                    b.Property<string>("Name");

                    b.Property<int>("OrganiserID");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("EventId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Events1");
                });

            modelBuilder.Entity("TournamentMonitor.Models.EventType", b =>
                {
                    b.Property<long>("EventTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("PointsValue");

                    b.Property<bool>("Sacntionable");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("TournamentMonitor.Models.GameFormat", b =>
                {
                    b.Property<long>("GameFormatId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("GameTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("GameFormatId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("GameFormats");
                });

            modelBuilder.Entity("TournamentMonitor.Models.GameType", b =>
                {
                    b.Property<long>("GameTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("LeagueId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.HasKey("GameTypeId");

                    b.HasIndex("LeagueId");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("TournamentMonitor.Models.IDBankRecord", b =>
                {
                    b.Property<long>("IDBankKey")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PlayerID");

                    b.Property<DateTime>("TimeUsed");

                    b.Property<bool>("Used");

                    b.HasKey("IDBankKey");

                    b.ToTable("IDBankRecords");
                });

            modelBuilder.Entity("TournamentMonitor.Models.League", b =>
                {
                    b.Property<long>("LeagueId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("TPCLeagueId");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("TournamentMonitor.Models.MatchRecord", b =>
                {
                    b.Property<long>("MatchKey")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompetitorKey1");

                    b.Property<long>("CompetitorKey2");

                    b.Property<int>("MatchOutcome");

                    b.Property<long?>("Player1CompetitorKey");

                    b.Property<long?>("Player2CompetitorKey");

                    b.Property<long>("RoundKey");

                    b.Property<int>("TableNumber");

                    b.Property<string>("Timestamp");

                    b.HasKey("MatchKey");

                    b.HasIndex("Player1CompetitorKey");

                    b.HasIndex("Player2CompetitorKey");

                    b.HasIndex("RoundKey");

                    b.ToTable("MatchRecords");
                });

            modelBuilder.Entity("TournamentMonitor.Models.PlayerRecord", b =>
                {
                    b.Property<long>("PlayerKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DoB");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PlayerId")
                        .HasMaxLength(10);

                    b.HasKey("PlayerKey");

                    b.ToTable("PlayerRecords");
                });

            modelBuilder.Entity("TournamentMonitor.Models.PlayerTournaments", b =>
                {
                    b.Property<long>("PlayerTournamentsKey")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CompetitorRecordCompetitorKey");

                    b.Property<long?>("PlayerKey");

                    b.Property<long?>("TournamentKey");

                    b.HasKey("PlayerTournamentsKey");

                    b.HasIndex("CompetitorRecordCompetitorKey");

                    b.HasIndex("PlayerKey");

                    b.HasIndex("TournamentKey");

                    b.ToTable("PlayerTournaments");
                });

            modelBuilder.Entity("TournamentMonitor.Models.PodRecord", b =>
                {
                    b.Property<long>("PodKey")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<string>("DivisionName");

                    b.Property<long>("TournamentKey");

                    b.HasKey("PodKey");

                    b.HasIndex("TournamentKey");

                    b.ToTable("PodRecords");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Country", b =>
                {
                    b.Property<long>("CountryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryName");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.DivisionDetail", b =>
                {
                    b.Property<long>("DivisionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<string>("Description");

                    b.Property<int>("EliminationMatchPoints");

                    b.Property<TimeSpan>("EliminationRoundTime");

                    b.Property<float>("EntryCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("RegistrationClosed");

                    b.Property<DateTime>("RegistrationOpen");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("SwissMatchPoints");

                    b.Property<TimeSpan>("SwissRoundTime");

                    b.Property<int>("TotalRegistered");

                    b.Property<long?>("TournamentID");

                    b.HasKey("DivisionID");

                    b.HasIndex("TournamentID");

                    b.ToTable("DivisionDetails");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Event", b =>
                {
                    b.Property<long>("EventID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("EventID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Format", b =>
                {
                    b.Property<long>("FormatID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("FormatID");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Organiser", b =>
                {
                    b.Property<long>("OrganiserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactNo");

                    b.Property<string>("Email");

                    b.Property<string>("Forename");

                    b.Property<string>("Surname");

                    b.Property<string>("Website");

                    b.HasKey("OrganiserID");

                    b.ToTable("Organisers");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Player", b =>
                {
                    b.Property<long>("PlayerID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Email");

                    b.Property<string>("Forename");

                    b.Property<int>("PID");

                    b.Property<string>("Password");

                    b.Property<string>("Password2");

                    b.Property<string>("Password3");

                    b.Property<string>("Surname");

                    b.HasKey("PlayerID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Product", b =>
                {
                    b.Property<long>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.RegistrationStatus", b =>
                {
                    b.Property<long>("StatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("StatusID");

                    b.ToTable("RegistrationStatuses");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Tournament", b =>
                {
                    b.Property<long>("TournamentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<long>("EventID");

                    b.Property<long?>("FormatID");

                    b.Property<long?>("OrganiserID");

                    b.Property<long?>("ProductID");

                    b.Property<bool>("RegistrationRequired");

                    b.Property<int>("SanctionID");

                    b.Property<string>("TournamentName");

                    b.Property<long?>("TournamentTypeID");

                    b.Property<long?>("VenueID");

                    b.HasKey("TournamentID");

                    b.HasIndex("EventID");

                    b.HasIndex("FormatID");

                    b.HasIndex("OrganiserID");

                    b.HasIndex("ProductID");

                    b.HasIndex("TournamentTypeID");

                    b.HasIndex("VenueID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.TournamentRegistration", b =>
                {
                    b.Property<long>("TournamentID");

                    b.Property<long>("PlayerID");

                    b.Property<string>("Division");

                    b.Property<float>("PaidAmount")
                        .HasColumnType("money");

                    b.Property<long?>("RegistrationStatusStatusID");

                    b.HasKey("TournamentID", "PlayerID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("RegistrationStatusStatusID");

                    b.ToTable("TournamentRegistrations");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.TournamentType", b =>
                {
                    b.Property<long>("TournamentTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TournamentTypeID");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Venue", b =>
                {
                    b.Property<long>("VenueID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<long?>("CountryID");

                    b.Property<string>("County");

                    b.Property<string>("Name");

                    b.Property<string>("Postcode");

                    b.HasKey("VenueID");

                    b.HasIndex("CountryID");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RoundRecord", b =>
                {
                    b.Property<long>("RoundKey")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<int>("Number");

                    b.Property<long>("PodKey");

                    b.Property<int>("Stage");

                    b.Property<int>("Type");

                    b.HasKey("RoundKey");

                    b.HasIndex("PodKey");

                    b.ToTable("RoundRecords");
                });

            modelBuilder.Entity("TournamentMonitor.Models.StandingRecord", b =>
                {
                    b.Property<long>("StandingKey")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<long?>("CompetitorKey");

                    b.Property<int>("Place");

                    b.Property<long>("TournamentKey");

                    b.Property<string>("Type");

                    b.HasKey("StandingKey");

                    b.HasIndex("CompetitorKey");

                    b.HasIndex("TournamentKey");

                    b.ToTable("StandingRecords");
                });

            modelBuilder.Entity("TournamentMonitor.Models.TournamentRecord", b =>
                {
                    b.Property<long>("TournamentKey")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<long?>("Event1EventId");

                    b.Property<bool>("IsComplete");

                    b.Property<string>("Name");

                    b.Property<int>("OrganiserID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("State");

                    b.Property<string>("TournamentID");

                    b.HasKey("TournamentKey");

                    b.HasIndex("Event1EventId");

                    b.ToTable("TournamentRecords");
                });

            modelBuilder.Entity("TournamentMonitor.Models.Common.Address", b =>
                {
                    b.HasOne("TournamentMonitor.Models.Country1", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("TournamentMonitor.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId");

                    b.HasOne("TournamentMonitor.Models.PlayerRecord", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerKey");
                });

            modelBuilder.Entity("TournamentMonitor.Models.CompetitorRecord", b =>
                {
                    b.HasOne("TournamentMonitor.Models.PlayerRecord", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerKey");
                });

            modelBuilder.Entity("TournamentMonitor.Models.Country1", b =>
                {
                    b.HasOne("TournamentMonitor.Models.Common.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("TournamentMonitor.Models.Event1", b =>
                {
                    b.HasOne("TournamentMonitor.Models.EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId");

                    b.HasOne("TournamentMonitor.Models.League", "League")
                        .WithMany("Events")
                        .HasForeignKey("LeagueId");
                });

            modelBuilder.Entity("TournamentMonitor.Models.GameFormat", b =>
                {
                    b.HasOne("TournamentMonitor.Models.GameType", "GameType")
                        .WithMany("Formats")
                        .HasForeignKey("GameTypeId");
                });

            modelBuilder.Entity("TournamentMonitor.Models.GameType", b =>
                {
                    b.HasOne("TournamentMonitor.Models.League")
                        .WithMany("GamesPlayed")
                        .HasForeignKey("LeagueId");
                });

            modelBuilder.Entity("TournamentMonitor.Models.MatchRecord", b =>
                {
                    b.HasOne("TournamentMonitor.Models.CompetitorRecord", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1CompetitorKey");

                    b.HasOne("TournamentMonitor.Models.CompetitorRecord", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2CompetitorKey");

                    b.HasOne("TournamentMonitor.Models.RoundRecord", "Round")
                        .WithMany("MatchRecords")
                        .HasForeignKey("RoundKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TournamentMonitor.Models.PlayerTournaments", b =>
                {
                    b.HasOne("TournamentMonitor.Models.CompetitorRecord", "CompetitorRecord")
                        .WithMany()
                        .HasForeignKey("CompetitorRecordCompetitorKey");

                    b.HasOne("TournamentMonitor.Models.PlayerRecord", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerKey");

                    b.HasOne("TournamentMonitor.Models.TournamentRecord", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentKey");
                });

            modelBuilder.Entity("TournamentMonitor.Models.PodRecord", b =>
                {
                    b.HasOne("TournamentMonitor.Models.TournamentRecord", "Tournament")
                        .WithMany("PodRecords")
                        .HasForeignKey("TournamentKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.DivisionDetail", b =>
                {
                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Tournament", "Tournament")
                        .WithMany("DivisionDetails")
                        .HasForeignKey("TournamentID");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Tournament", b =>
                {
                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Event", "Event")
                        .WithMany("Tournaments")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Format", "Format")
                        .WithMany("Tournaments")
                        .HasForeignKey("FormatID");

                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Organiser", "Organiser")
                        .WithMany("Tournaments")
                        .HasForeignKey("OrganiserID");

                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Product", "Product")
                        .WithMany("Tournaments")
                        .HasForeignKey("ProductID");

                    b.HasOne("TournamentMonitor.Models.RegistrationTables.TournamentType", "TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeID");

                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Venue", "Venue")
                        .WithMany("Tournaments")
                        .HasForeignKey("VenueID");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.TournamentRegistration", b =>
                {
                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Player", "Player")
                        .WithMany("TournamentRegistrations")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TournamentMonitor.Models.RegistrationTables.RegistrationStatus", "RegistrationStatus")
                        .WithMany("TournamentRegistrations")
                        .HasForeignKey("RegistrationStatusStatusID");

                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Tournament", "Tournament")
                        .WithMany("TournamentRegistrations")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TournamentMonitor.Models.RegistrationTables.Venue", b =>
                {
                    b.HasOne("TournamentMonitor.Models.RegistrationTables.Country", "Country")
                        .WithMany("Venues")
                        .HasForeignKey("CountryID");
                });

            modelBuilder.Entity("TournamentMonitor.Models.RoundRecord", b =>
                {
                    b.HasOne("TournamentMonitor.Models.PodRecord", "Pod")
                        .WithMany("RoundRecords")
                        .HasForeignKey("PodKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TournamentMonitor.Models.StandingRecord", b =>
                {
                    b.HasOne("TournamentMonitor.Models.CompetitorRecord", "Competitor")
                        .WithMany("StandingRecords")
                        .HasForeignKey("CompetitorKey");

                    b.HasOne("TournamentMonitor.Models.TournamentRecord", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TournamentMonitor.Models.TournamentRecord", b =>
                {
                    b.HasOne("TournamentMonitor.Models.Event1")
                        .WithMany("TournamentRecords")
                        .HasForeignKey("Event1EventId");
                });
#pragma warning restore 612, 618
        }
    }
}
